========================
CODE SNIPPETS
========================
TITLE: Interacting with Pump.fun Program in Rust
DESCRIPTION: This Rust example showcases the core functionalities of the Pump.fun SDK. It demonstrates how to initialize the `PumpFun` client, define token metadata, create new tokens, create and buy tokens in a single transaction, buy existing tokens, sell tokens, and retrieve bonding curve details. It also illustrates how to subscribe to real-time events for token creations and trades, providing a complete flow for managing tokens on Pump.fun.

SOURCE: https://github.com/nhuxhr/pumpfun-rs/blob/master/README.md#_snippet_2

LANGUAGE: Rust
CODE:
```
use pumpfun::{
    accounts::BondingCurveAccount,
    common::types::{Cluster, PriorityFee},
    utils::CreateTokenMetadata,
    PumpFun,
};
use solana_sdk::{
    commitment_config::CommitmentConfig,
    native_token::sol_to_lamports,
    native_token::LAMPORTS_PER_SOL,
    signature::{Keypair, Signature},
    signer::Signer,
};
use std::sync::Arc;

// Create a new PumpFun client
let payer = Arc::new(Keypair::new());
let client = PumpFun::new(
    payer.clone(),
    Cluster::localnet(CommitmentConfig::finalized(), PriorityFee::default()),
);

// Mint keypair
let mint = Keypair::new();

// Token metadata
let metadata = CreateTokenMetadata {
    name: "Lorem ipsum".to_string(),
    symbol: "LIP".to_string(),
    description: "Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quam, nisi.".to_string(),
    file: "/path/to/image.png".to_string(),
    twitter: None,
    telegram: None,
    website: Some("https://example.com".to_string()),
};

// Optional priority fee to expedite transaction processing (e.g., 100 LAMPORTS per compute unit, equivalent to a 0.01 SOL priority fee)
let fee = Some(PriorityFee {
    unit_limit: Some(100_000),
    unit_price: Some(100_000_000),
});

// Create token with metadata
let signature = client.create(mint.insecure_clone(), metadata.clone(), fee).await.unwrap();
println!("Create signature: {}", signature);

// Create and buy tokens with metadata
let signature = client.create_and_buy(mint.insecure_clone(), metadata.clone(), sol_to_lamports(1f64), None, fee).await.unwrap();
println!("Created and buy signature: {}", signature);

// Print the curve
let curve = client.get_bonding_curve_account(&mint.pubkey()).await.unwrap();
println!("Bonding curve: {:#?}", curve);

// Buy tokens (ATA will be created automatically if needed)
let signature = client.buy(mint.pubkey(), sol_to_lamports(1f64), None, fee).await.unwrap();
println!("Buy signature: {}", signature);

// Sell tokens (sell all tokens)
let signature = client.sell(mint.pubkey(), None, None, fee).await.unwrap();
println!("Sell signature: {}", signature);

// Subscribe to real-time events with the stream feature
use pumpfun::common::stream::PumpFunEvent;

// Subscribe to Pump.fun events
let subscription = client.subscribe(None, |signature, event, error, _response| {
    match event {
        Some(PumpFunEvent::Create(create_event)) => {
            println!("New token created: {} ({})", create_event.name, create_event.symbol);
            println!("Mint address: {}", create_event.mint);
            println!("Created by: {}", create_event.creator);
        },
        Some(PumpFunEvent::Trade(trade_event)) => {
            let action = if trade_event.is_buy { "bought" } else { "sold" };
            println!(
                "User {} {} {} tokens for {} SOL",
                trade_event.user,
                action,
                trade_event.token_amount,
                trade_event.sol_amount as f64 / 1_000_000_000.0
            );
        },
        Some(event) => println!("Other event received: {:#?}", event),
        None => {
            if let Some(err) = error {
                eprintln!("Error parsing event in tx {}: {}", signature, err);
            }
        }
    }
}).await.unwrap();

// Keep subscription active as long as needed
// The subscription will automatically unsubscribe when dropped
```

----------------------------------------

TITLE: Installing Pump.fun SDK with Cargo
DESCRIPTION: This command adds the `pumpfun` crate as a dependency to your Rust project using Cargo, the Rust package manager. It's the first step to integrate the Pump.fun Solana Program SDK into your application.

SOURCE: https://github.com/nhuxhr/pumpfun-rs/blob/master/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
cargo add pumpfun
```

----------------------------------------

TITLE: Interacting with Pump.fun Program in Rust
DESCRIPTION: This comprehensive Rust example demonstrates various interactions with the Pump.fun Solana program using the SDK. It covers client initialization, creating new tokens with metadata, creating and buying tokens in a single transaction, buying existing tokens, selling tokens, querying bonding curve accounts, and subscribing to real-time events like token creation and trades. It highlights the automatic ATA creation feature and the use of priority fees.

SOURCE: https://github.com/nhuxhr/pumpfun-rs/blob/master/RUSTDOC.md#_snippet_2

LANGUAGE: Rust
CODE:
```
use pumpfun::{
    accounts::BondingCurveAccount,
    common::types::{Cluster, PriorityFee},
    utils::CreateTokenMetadata,
    PumpFun,
};
use solana_sdk::{
    commitment_config::CommitmentConfig,
    native_token::sol_to_lamports,
    native_token::LAMPORTS_PER_SOL,
    signature::{Keypair, Signature},
    signer::Signer,
};
use std::sync::Arc;

# tokio_test::block_on(async {
// Create a new PumpFun client
let payer = Arc::new(Keypair::new());
let client = PumpFun::new(
    payer.clone(),
    Cluster::localnet(CommitmentConfig::finalized(), PriorityFee::default()),
);

// Mint keypair
let mint = Keypair::new();

// Token metadata
let metadata = CreateTokenMetadata {
    name: "Lorem ipsum".to_string(),
    symbol: "LIP".to_string(),
    description: "Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quam, nisi.".to_string(),
    file: "/path/to/image.png".to_string(),
    twitter: None,
    telegram: None,
    website: Some("https://example.com".to_string()),
};

// Optional priority fee to expedite transaction processing (e.g., 100 LAMPORTS per compute unit, equivalent to a 0.01 SOL priority fee)
let fee = Some(PriorityFee {
    unit_limit: Some(100_000),
    unit_price: Some(100_000_000),
});

// Create token with metadata
let signature = client.create(mint.insecure_clone(), metadata.clone(), fee).await.unwrap();
println!("Create signature: {}", signature);

// Create and buy tokens with metadata
let signature = client.create_and_buy(mint.insecure_clone(), metadata.clone(), sol_to_lamports(1f64), None, fee).await.unwrap();
println!("Created and buy signature: {}", signature);

// Print the curve
let curve = client.get_bonding_curve_account(&mint.pubkey()).await.unwrap();
println!("Bonding curve: {:#?}", curve);

// Buy tokens (ATA will be created automatically if needed)
let signature = client.buy(mint.pubkey(), sol_to_lamports(1f64), None, fee).await.unwrap();
println!("Buy signature: {}", signature);

// Sell tokens (sell all tokens)
let signature = client.sell(mint.pubkey(), None, None, fee).await.unwrap();
println!("Sell signature: {}", signature);

// Subscribe to real-time events with the stream feature
# #[cfg(feature = "stream")]
use pumpfun::common::stream::PumpFunEvent;

// Subscribe to Pump.fun events
# #[cfg(feature = "stream")]
let subscription = client.subscribe(None, |signature, event, error, _response| {
    match event {
        Some(PumpFunEvent::Create(create_event)) => {
            println!("New token created: {} ({})", create_event.name, create_event.symbol);
            println!("Mint address: {}", create_event.mint);
            println!("Created by: {}", create_event.creator);
        },
        Some(PumpFunEvent::Trade(trade_event)) => {
            let action = if trade_event.is_buy { "bought" } else { "sold" };
            println!(
                "User {} {} {} tokens for {} SOL",
                trade_event.user,
                action,
                trade_event.token_amount,
                trade_event.sol_amount as f64 / 1_000_000_000.0
            );
        },
        Some(event) => println!("Other event received: {:#?}", event),
        None => {
            if let Some(err) = error {
                eprintln!("Error parsing event in tx {}: {}", signature, err);
            }
        }
    }
}).await.unwrap();

// Keep subscription active as long as needed
// The subscription will automatically unsubscribe when dropped
# });
```

----------------------------------------

TITLE: Configuring PumpFun Rust SDK Features in Cargo.toml
DESCRIPTION: This TOML snippet demonstrates how to configure the `pumpfun` dependency in `Cargo.toml` to enable or disable specific features. It shows examples for using default features, disabling all defaults, selecting custom features like `versioned-tx`, and enabling `stream` for WebSocket subscriptions.

SOURCE: https://github.com/nhuxhr/pumpfun-rs/blob/master/RUSTDOC.md#_snippet_3

LANGUAGE: TOML
CODE:
```
# Use default features (create-ata and close-ata enabled)
pumpfun = "4.3.0"

# Disable all default features
pumpfun = { version = "4.3.0", default-features = false }

# Custom selection of features
pumpfun = { version = "4.3.0", default-features = false, features = ["versioned-tx"] }

# Enable WebSocket event subscriptions
pumpfun = { version = "4.3.0", features = ["stream"] }
```

----------------------------------------

TITLE: Running Test Validator with Custom Programs Directory
DESCRIPTION: Starts the local Solana test validator, specifying a custom directory for program binaries using the `PROGRAMS_DIR` environment variable. This allows developers to use their own compiled program versions instead of the default downloaded ones.

SOURCE: https://github.com/nhuxhr/pumpfun-rs/blob/master/CONTRIBUTING.md#_snippet_6

LANGUAGE: Shell
CODE:
```
PROGRAMS_DIR=./my-programs ./pumpfun-test-validator.sh
```

----------------------------------------

TITLE: Configuring Pumpfun Rust SDK Feature Flags in Cargo.toml
DESCRIPTION: This TOML snippet demonstrates how to configure the `pumpfun` crate in `Cargo.toml` to enable or disable specific feature flags. It shows examples for using default features, disabling all defaults, enabling `versioned-tx` for ALTs, and enabling `stream` for WebSocket event subscriptions.

SOURCE: https://github.com/nhuxhr/pumpfun-rs/blob/master/README.md#_snippet_3

LANGUAGE: TOML
CODE:
```
# Use default features (create-ata and close-ata enabled)
pumpfun = "4.3.0"

# Disable all default features
pumpfun = { version = "4.3.0", default-features = false }

# Custom selection of features
pumpfun = { version = "4.3.0", default-features = false, features = ["versioned-tx"] }

# Enable WebSocket event subscriptions
pumpfun = { version = "4.3.0", features = ["stream"] }
```

----------------------------------------

TITLE: Running Pump.fun Local Test Validator
DESCRIPTION: These commands demonstrate how to set up and run a local Solana test validator configured with the Pump.fun program. The script automatically handles downloads and dependencies, providing an isolated environment for development and testing. The `--log` option enables detailed logging.

SOURCE: https://github.com/nhuxhr/pumpfun-rs/blob/master/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
cd <path-to-pumpfun-rs-repo>/scripts
```

LANGUAGE: Shell
CODE:
```
./pumpfun-test-validator.sh
```

LANGUAGE: Shell
CODE:
```
./pumpfun-test-validator.sh --log
```

----------------------------------------

TITLE: Running Pump.fun Local Test Validator
DESCRIPTION: These shell commands demonstrate how to run the Pump.fun test validator script for local development and testing. The script automatically sets up a Solana test validator with the necessary Pump.fun program and dependencies. Options like `--log` can be used for detailed output.

SOURCE: https://github.com/nhuxhr/pumpfun-rs/blob/master/RUSTDOC.md#_snippet_1

LANGUAGE: Shell
CODE:
```
cd <path-to-pumpfun-rs-repo>/scripts
./pumpfun-test-validator.sh
./pumpfun-test-validator.sh --log
```

----------------------------------------

TITLE: Cloning PumpFun Rust SDK Repository
DESCRIPTION: Clones the forked PumpFun Rust SDK repository from GitHub to your local machine, allowing you to begin development. Replace `your-username` with your actual GitHub username.

SOURCE: https://github.com/nhuxhr/pumpfun-rs/blob/master/CONTRIBUTING.md#_snippet_0

LANGUAGE: Shell
CODE:
```
git clone https://github.com/your-username/pumpfun-rs.git
```

----------------------------------------

TITLE: Running Solana Test Validator for Pump.fun
DESCRIPTION: Executes the `pumpfun-test-validator.sh` script to set up a local Solana test validator. This validator is pre-configured with the Pump.fun program, MPL Token Metadata program, and required account data, providing a local environment for development and testing.

SOURCE: https://github.com/nhuxhr/pumpfun-rs/blob/master/CONTRIBUTING.md#_snippet_5

LANGUAGE: Shell
CODE:
```
./pumpfun-test-validator.sh
```

----------------------------------------

TITLE: Connecting PumpFun Rust SDK to Local Solana Validator
DESCRIPTION: Initializes a `PumpFun` client instance configured to connect to a local Solana test validator. It uses a `Cluster::Custom` endpoint, specifying the RPC and WebSocket URLs, and requires a `payer` keypair for transactions and an optional `CommitmentConfig`.

SOURCE: https://github.com/nhuxhr/pumpfun-rs/blob/master/CONTRIBUTING.md#_snippet_9

LANGUAGE: Rust
CODE:
```
let client = PumpFun::new(
    Cluster::Custom(
        "http://127.0.0.1:8899".to_string(),
        "ws://127.0.0.1:8900".to_string(),
    ),
    payer.clone(),
    Some(CommitmentConfig::confirmed()),
    None,
);
```

----------------------------------------

TITLE: Running All Rust Tests
DESCRIPTION: Executes the entire test suite for the Rust project using Cargo. This command is typically run before submitting changes to ensure that all existing functionality remains intact and new features are properly validated.

SOURCE: https://github.com/nhuxhr/pumpfun-rs/blob/master/CONTRIBUTING.md#_snippet_10

LANGUAGE: Shell
CODE:
```
cargo test
```

----------------------------------------

TITLE: Adding Pump.fun SDK to Rust Project
DESCRIPTION: This command adds the `pumpfun` crate as a dependency to your Rust project using Cargo, the Rust package manager. This is the first step to integrate the Pump.fun SDK into your application.

SOURCE: https://github.com/nhuxhr/pumpfun-rs/blob/master/RUSTDOC.md#_snippet_0

LANGUAGE: Shell
CODE:
```
cargo add pumpfun
```

----------------------------------------

TITLE: Running PumpFun Rust SDK Tests
DESCRIPTION: Executes the test suite for the PumpFun Rust SDK using Cargo. The `-F versioned-tx,stream` flag enables specific features, and `--test-threads 1` ensures tests run sequentially, which can be important for tests interacting with shared resources like a local validator.

SOURCE: https://github.com/nhuxhr/pumpfun-rs/blob/master/CONTRIBUTING.md#_snippet_3

LANGUAGE: Shell
CODE:
```
cargo test -F versioned-tx,stream -- --test-threads 1
```

----------------------------------------

TITLE: Building PumpFun Rust SDK
DESCRIPTION: Compiles the PumpFun Rust SDK project using Cargo, Rust's package manager. This command checks for compilation errors and ensures all dependencies are correctly linked, preparing the project for testing or execution.

SOURCE: https://github.com/nhuxhr/pumpfun-rs/blob/master/CONTRIBUTING.md#_snippet_2

LANGUAGE: Shell
CODE:
```
cargo build
```

----------------------------------------

TITLE: Formatting Rust Code with Cargo Fmt
DESCRIPTION: Applies standard Rust formatting rules to the project's source code using `cargo fmt`. This helps maintain consistent code style across the codebase, improving readability and reducing stylistic conflicts during collaboration.

SOURCE: https://github.com/nhuxhr/pumpfun-rs/blob/master/CONTRIBUTING.md#_snippet_11

LANGUAGE: Shell
CODE:
```
cargo fmt
```

----------------------------------------

TITLE: Navigating to Scripts Directory
DESCRIPTION: Changes the current directory to the `scripts` folder within the repository. This is a prerequisite for executing utility scripts like the `pumpfun-test-validator.sh`.

SOURCE: https://github.com/nhuxhr/pumpfun-rs/blob/master/CONTRIBUTING.md#_snippet_4

LANGUAGE: Shell
CODE:
```
cd scripts
```

----------------------------------------

TITLE: Checking Rust Code with Cargo Clippy
DESCRIPTION: Runs Clippy, a Rust linter, to catch common mistakes, improve code quality, and suggest idiomatic Rust practices. It helps identify potential bugs, performance issues, and stylistic inconsistencies before code review.

SOURCE: https://github.com/nhuxhr/pumpfun-rs/blob/master/CONTRIBUTING.md#_snippet_12

LANGUAGE: Shell
CODE:
```
cargo clippy
```

----------------------------------------

TITLE: Running Test Validator with Custom Accounts Directory
DESCRIPTION: Initiates the local Solana test validator, directing it to use a custom directory for account data via the `ACCOUNTS_DIR` environment variable. This is useful for managing specific account states or testing with pre-defined account configurations.

SOURCE: https://github.com/nhuxhr/pumpfun-rs/blob/master/CONTRIBUTING.md#_snippet_7

LANGUAGE: Shell
CODE:
```
ACCOUNTS_DIR=./my-accounts ./pumpfun-test-validator.sh
```

----------------------------------------

TITLE: Creating a New Feature Branch
DESCRIPTION: Creates and switches to a new Git branch for your feature development. This isolates your changes from the main branch and is a standard practice for contributions. Replace `your-feature-name` with a descriptive name for your feature.

SOURCE: https://github.com/nhuxhr/pumpfun-rs/blob/master/CONTRIBUTING.md#_snippet_1

LANGUAGE: Shell
CODE:
```
git checkout -b feature/your-feature-name
```

----------------------------------------

TITLE: Running Test Validator with Logging Enabled
DESCRIPTION: Executes the local Solana test validator script, passing the `--log` argument to the underlying `solana-test-validator` command. This enables detailed logging, which is helpful for debugging and monitoring validator activity during development.

SOURCE: https://github.com/nhuxhr/pumpfun-rs/blob/master/CONTRIBUTING.md#_snippet_8

LANGUAGE: Shell
CODE:
```
./pumpfun-test-validator.sh --log
```