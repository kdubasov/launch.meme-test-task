========================
CODE SNIPPETS
========================
TITLE: Install Raydium SDK using Yarn
DESCRIPTION: This snippet demonstrates how to add the Raydium SDK v2 package to your project using the Yarn package manager. This is the first step to integrate the SDK into your application.

SOURCE: https://github.com/raydium-io/raydium-sdk-v2/blob/master/README.md#_snippet_0

LANGUAGE: shell
CODE:
```
yarn add @raydium-io/raydium-sdk-v2
```

----------------------------------------

TITLE: Fetch Token Information by Mint Addresses
DESCRIPTION: This JavaScript example shows how to retrieve detailed information for specific tokens by providing an array of their mint addresses. This allows developers to query data for tokens recognizable by Raydium.

SOURCE: https://github.com/raydium-io/raydium-sdk-v2/blob/master/README.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const data = await raydium.api.getTokenInfo([
  "So11111111111111111111111111111111111111112",
  "4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R",
]);
```

----------------------------------------

TITLE: Run Raydium SDK Local Test
DESCRIPTION: This command shows how to run a local test for the Raydium SDK using Yarn. It allows developers to test specific files or directories within the SDK's test suite, for example, 'test/init.ts'.

SOURCE: https://github.com/raydium-io/raydium-sdk-v2/blob/master/README.md#_snippet_1

LANGUAGE: shell
CODE:
```
yarn dev {directory}

e.g. yarn dev test/init.ts
```

----------------------------------------

TITLE: Fetch Raydium Farm Information by IDs
DESCRIPTION: This JavaScript example shows how to retrieve details for specific farming pools by providing a comma-separated string of farm IDs. This method is used to query information about known liquidity farming opportunities on Raydium's mainnet.

SOURCE: https://github.com/raydium-io/raydium-sdk-v2/blob/master/README.md#_snippet_10

LANGUAGE: javascript
CODE:
```
const data = await raydium.api.fetchFarmInfoById({
  ids: "4EwbZo8BZXP5313z5A2H11MRBP15M5n6YxfmkjXESKAW,HUDr9BDaAGqi37xbQHzxCyXvfMCKPTPNF8g9c9bPu1Fu",
});
```

----------------------------------------

TITLE: Fetch Raydium Pool Information by IDs
DESCRIPTION: This JavaScript example shows how to retrieve specific pool information by providing a comma-separated string of pool IDs. This method is useful for querying details of known trading pools on Raydium's mainnet.

SOURCE: https://github.com/raydium-io/raydium-sdk-v2/blob/master/README.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const data = await raydium.api.fetchPoolById({
  ids: "AVs9TA4nWDzfPJE9gGVNJMVhcQy3V9PGazuz33BfG2RA,8sLbNZoA1cfnvMJLPfp98ZLAnFSYCFApfJKMbiXNLwxj",
});
```

----------------------------------------

TITLE: Parse Token Account Response Data
DESCRIPTION: This JavaScript example illustrates how to parse token account responses from the Solana connection. It combines standard SPL token accounts and Token-2022 accounts to provide a unified view of the owner's token holdings.

SOURCE: https://github.com/raydium-io/raydium-sdk-v2/blob/master/README.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import { parseTokenAccountResp } from "@raydium-io/raydium-sdk";

const solAccountResp = await connection.getAccountInfo(owner.publicKey);
const tokenAccountResp = await connection.getTokenAccountsByOwner(owner.publicKey, { programId: TOKEN_PROGRAM_ID });
const token2022Req = await connection.getTokenAccountsByOwner(owner.publicKey, { programId: TOKEN_2022_PROGRAM_ID });
const tokenAccountData = parseTokenAccountResp({
  owner: owner.publicKey,
  solAccountResp,
  tokenAccountResp: {
    context: tokenAccountResp.context,
    value: [...tokenAccountResp.value, ...token2022Req.value],
  },
});
```

----------------------------------------

TITLE: Initialize Raydium SDK
DESCRIPTION: This JavaScript snippet demonstrates how to initialize the Raydium SDK. It requires a Solana connection and an owner (key pair or public key), with optional parameters for transaction signing, token accounts, and disabling token loading.

SOURCE: https://github.com/raydium-io/raydium-sdk-v2/blob/master/README.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import { Raydium } from "@raydium-io/raydium-sdk";
const raydium = await Raydium.load({
  connection,
  owner, // key pair or publicKey, if you run a node process, provide keyPair
  signAllTransactions, // optional - provide sign functions provided by @solana/wallet-adapter-react
  tokenAccounts, // optional, if dapp handle it by self can provide to sdk
  tokenAccountRowInfos, // optional, if dapp handle it by self can provide to sdk
  disableLoadToken: false, // default is false, if you don't need token info, set to true
});
```

----------------------------------------

TITLE: Raydium SDK Initialized Data Structure
DESCRIPTION: This section outlines the data structures available within the Raydium SDK instance after successful initialization. It includes access to token lists, token maps, mint groups, and detailed token account information.

SOURCE: https://github.com/raydium-io/raydium-sdk-v2/blob/master/README.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
# token
raydium.token.tokenList
raydium.token.tokenMap
raydium.token.mintGroup


# token account
raydium.account.tokenAccounts
raydium.account.tokenAccountRawInfos
```

----------------------------------------

TITLE: Fetch Raydium Default Mint List
DESCRIPTION: This JavaScript snippet demonstrates how to fetch the default mint list recognized by Raydium using the SDK's API. This method is specific to mainnet and provides a list of commonly used tokens.

SOURCE: https://github.com/raydium-io/raydium-sdk-v2/blob/master/README.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const data = await raydium.api.getTokenList();
```

----------------------------------------

TITLE: Fetch Raydium Pool by Mint Addresses
DESCRIPTION: This JavaScript snippet demonstrates how to find a trading pool based on the mint addresses of the tokens involved. It supports specifying one or two mints and additional parameters for filtering the results.

SOURCE: https://github.com/raydium-io/raydium-sdk-v2/blob/master/README.md#_snippet_9

LANGUAGE: javascript
CODE:
```
const data = await raydium.api.fetchPoolByMints({
  mint1: "So11111111111111111111111111111111111111112",
  mint2: "4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R", // optional,
  // extra params: https://github.com/raydium-io/raydium-sdk-V2/blob/master/src/api/type.ts#L249
});
```

----------------------------------------

TITLE: Fetch Raydium Pool List
DESCRIPTION: This JavaScript snippet demonstrates how to fetch a list of trading pools from Raydium. The method supports various optional parameters for filtering, which are defined in the SDK's API type definitions.

SOURCE: https://github.com/raydium-io/raydium-sdk-v2/blob/master/README.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const data = await raydium.api.getPoolList({});
```